{"version":3,"sources":["./src/app/main/conects/conects.component.ts","./src/app/main/conects/conects.component.html","./src/app/main/main.routing.module.ts","./node_modules/@google-pay/button-angular/__ivy_ngcc__/fesm2015/google-pay-button-angular.js","./src/app/main/main.module.ts","./src/app/main/navbar/navbar.component.ts","./src/app/main/navbar/navbar.component.html","./src/app/main/account/account.component.ts","./src/app/main/account/account.component.html","./src/app/main/main.component.ts","./src/app/main/main.component.html"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,2BAA2B,gDAAgD;AACjI;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iDAAiD,GAAG,wEAAwE;AAC5K;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,YAAY,yBAAyB;AACraAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yFAAyF,QAAQ;AACjG,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA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","file":"main-main-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-conects',\n  templateUrl: './conects.component.html',\n  styleUrls: ['./conects.component.css']\n})\nexport class ConectsComponent implements OnInit {\n  paymentRequest: google.payments.api.PaymentDataRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n    allowedPaymentMethods: [\n      {\n        type: 'CARD',\n        parameters: {\n          allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n          allowedCardNetworks: ['AMEX', 'VISA', 'MASTERCARD','ELO_DEBIT','ELECTRON']\n        },\n        tokenizationSpecification: {\n          type: 'PAYMENT_GATEWAY',\n          parameters: {\n          \n            gatewayMerchantId: 'exampleGatewayMerchantId'\n          }\n        }\n      }\n    ],\n    merchantInfo: {\n      merchantId: '12345678901234567890',\n      merchantName: 'Demo Merchant'\n    },\n    transactionInfo: {\n      totalPriceStatus: 'FINAL',\n      totalPriceLabel: 'Total',\n      totalPrice: '100.00',\n      currencyCode: 'INR',\n      countryCode: 'IN'\n    },\n    callbackIntents: ['PAYMENT_AUTHORIZATION']\n  };\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onLoadPaymentData = (event: Event): void => {\n    const eventDetail = event as CustomEvent<google.payments.api.PaymentData>;\n    console.log('Event detail', eventDetail);\n  }\n\n  onPaymentDataAuthorized: google.payments.api.PaymentAuthorizedHandler = (patmentData) => {\n    console.log('Payment Authorized: ', patmentData);\n    return {\n      transactionState: 'SUCCESS'\n    }\n  }\n\n  onError = (event: ErrorEvent): void => {\n    console.error(event);\n  }\n\n\n}\n","<div class=\"row\">\n    <div class=\"col-lg-3 col-md-6 mb-3\">\n        <div class=\"card\">\n            <img src=\"../assets/img/undraw_Add_files_re_v09g 1.svg\" class=\"card-img-top\" alt=\"...\" />\n            <div class=\"card-body\">\n                <h5 class=\"card-title text-center\">Add Person</h5>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-3 col-md-6 mb-3 \">\n        <div class=\"card\">\n            <img src=\"../assets/img/undraw_Add_files_re_v09g 1.svg\" class=\"card-img-top\" alt=\"...\" />\n            <div class=\"card-body\">\n                <h5 class=\"card-title text-center\">\n                    <h5 class=\"card-title text-center\">Add Person</h5>\n                    <!-- <google-pay-button environment=\"TEST\" buttonType=\"buy\" buttonColor=\"black\" [paymentRequest]=\"paymentRequest\" (loadpaymentdata)=\"onLoadPaymentData($event)\" (error)=\"onError($event)\" [paymentAuthorizedCallback]=\"onPaymentDataAuthorized\">\n                    </google-pay-button> -->\n                </h5>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-3 col-md-6 mb-3\">\n        <div class=\"card\">\n            <img src=\"../assets/img/undraw_Add_files_re_v09g 1.svg\" class=\"card-img-top\" alt=\"...\" />\n            <div class=\"card-body\">\n                <h5 class=\"card-title text-center\">Add Person</h5>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-3 col-md-6 mb-3\">\n        <div class=\"card\">\n\n            <img src=\"../assets/img/undraw_Add_files_re_v09g 1.svg\" class=\"card-img-top\" alt=\"...\" />\n            <div class=\"card-body\">\n                <h5 class=\"card-title text-center\">Add Person</h5>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"bussness-info mb-5\">\n    <h5 class=\"text-danger\">Bussess Idea:</h5>\n    <p>Browse this selection of poems about autumn, including classics like Robert Frost's \"After Apple-Picking\" alongside contemporary poems like Brenda Hillman's \"Autumn Ritual with Hate Turned Sideways.\"\n    </p>\n    <p>Browse this selection of poems about autumn, including classics like Robert Frost's \"After Apple-Picking\" alongside contemporary poems like Brenda Hillman's \"Autumn Ritual with Hate Turned Sideways.\"\n\n    </p>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { MainComponent } from './main.component';\nimport { RouterModule } from '@angular/router';\nimport { ConectsComponent } from './conects/conects.component';\nimport { MAIN_PATHS } from '../constants';\nimport { AccountComponent } from './account/account.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: MainComponent, children: [\n            {\n                path: '', redirectTo: MAIN_PATHS.CONTACT_LIST, pathMatch: 'full'\n            },\n            {\n                path: MAIN_PATHS.CONTACT_LIST, component: ConectsComponent\n            },\n            {\n                path: MAIN_PATHS.ACCOUNT, component: AccountComponent\n            }\n        ]\n    }\n]\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class MainRoutingModule { }","import { Directive, ElementRef, Input, NgModule } from '@angular/core';\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Keeps track scripts that have been requested by loadScript.\n */\nimport * as ɵngcc0 from '@angular/core';\nlet cachedScripts = {};\n/**\n * Asynchronously loads a script keeping track of which scripts have already\n * requested and loaded.\n *\n * Multiple requests to the same resource will return the same promise.\n *\n * @param src Script URL to load\n */\nfunction loadScript(src) {\n    const existing = cachedScripts[src];\n    if (existing) {\n        return existing;\n    }\n    const promise = new Promise((resolve, reject) => {\n        // Create script\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = true;\n        // Script event listener callbacks for load and error\n        const onScriptLoad = () => {\n            resolve();\n        };\n        const onScriptError = () => {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            cleanup();\n            // Remove from cachedScripts so that we can try loading again\n            delete cachedScripts[src];\n            script.remove();\n            reject(new Error(`Unable to load script ${src}`));\n        };\n        script.addEventListener('load', onScriptLoad);\n        script.addEventListener('error', onScriptError);\n        // Add script to document body\n        document.body.appendChild(script);\n        // Remove event listeners on cleanup\n        function cleanup() {\n            script.removeEventListener('load', onScriptLoad);\n            script.removeEventListener('error', onScriptError);\n        }\n    });\n    cachedScripts[src] = promise;\n    return promise;\n}\n/**\n * Clears the script cache. Used for testing purposes only.\n */\nfunction clearScriptCache() {\n    cachedScripts = {};\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * Manages the lifecycle of the Google Pay button.\n *\n * Includes lifecycle management of the `PaymentsClient` instance,\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\n */\nclass ButtonManager {\n    constructor(options) {\n        /**\n         * Handles the click event of the Google Pay button.\n         *\n         * This method would normally be private but has been made public for\n         * testing purposes.\n         *\n         * @private\n         */\n        this.handleClick = (event) => __awaiter(this, void 0, void 0, function* () {\n            const config = this.config;\n            if (!config) {\n                throw new Error('google-pay-button: Missing configuration');\n            }\n            const request = this.createLoadPaymentDataRequest(config);\n            try {\n                if (config.onClick) {\n                    config.onClick(event);\n                }\n                if (event.defaultPrevented) {\n                    return;\n                }\n                const result = yield this.client.loadPaymentData(request);\n                if (config.onLoadPaymentData) {\n                    config.onLoadPaymentData(result);\n                }\n            }\n            catch (err) {\n                if (err.statusCode === 'CANCELED') {\n                    if (config.onCancel) {\n                        config.onCancel(err);\n                    }\n                }\n                else if (config.onError) {\n                    config.onError(err);\n                }\n                else {\n                    console.error(err);\n                }\n            }\n        });\n        this.options = options;\n    }\n    getElement() {\n        return this.element;\n    }\n    isGooglePayLoaded() {\n        var _a, _b;\n        return 'google' in (window || global) && !!((_b = (_a = google === null || google === void 0 ? void 0 : google.payments) === null || _a === void 0 ? void 0 : _a.api) === null || _b === void 0 ? void 0 : _b.PaymentsClient);\n    }\n    mount(element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isGooglePayLoaded()) {\n                yield loadScript('https://pay.google.com/gp/p/js/pay.js');\n            }\n            this.element = element;\n            if (element) {\n                this.appendStyles();\n                if (this.config) {\n                    this.updateElement();\n                }\n            }\n        });\n    }\n    unmount() {\n        this.element = undefined;\n    }\n    configure(newConfig) {\n        let promise = undefined;\n        this.config = newConfig;\n        if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\n            promise = this.updateElement();\n        }\n        this.oldInvalidationValues = this.getInvalidationValues(newConfig);\n        return promise !== null && promise !== void 0 ? promise : Promise.resolve();\n    }\n    /**\n     * Creates client configuration options based on button configuration\n     * options.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    createClientOptions(config) {\n        const clientConfig = {\n            environment: config.environment,\n            merchantInfo: this.createMerchantInfo(config),\n        };\n        if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\n            clientConfig.paymentDataCallbacks = {};\n            if (config.onPaymentDataChanged) {\n                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n                clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\n                    const result = config.onPaymentDataChanged(paymentData);\n                    return result || {};\n                };\n            }\n            if (config.onPaymentAuthorized) {\n                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n                clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\n                    const result = config.onPaymentAuthorized(paymentData);\n                    return result || {};\n                };\n            }\n        }\n        return clientConfig;\n    }\n    createIsReadyToPayRequest(config) {\n        const paymentRequest = config.paymentRequest;\n        const request = {\n            apiVersion: paymentRequest.apiVersion,\n            apiVersionMinor: paymentRequest.apiVersionMinor,\n            allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\n            existingPaymentMethodRequired: config.existingPaymentMethodRequired,\n        };\n        return request;\n    }\n    /**\n     * Constructs `loadPaymentData` request object based on button configuration.\n     *\n     * It infers request properties like `shippingAddressRequired`,\n     * `shippingOptionRequired`, and `billingAddressRequired` if not already set\n     * based on the presence of their associated options and parameters. It also\n     * infers `callbackIntents` based on the callback methods defined in button\n     * configuration.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    createLoadPaymentDataRequest(config) {\n        const request = Object.assign(Object.assign({}, config.paymentRequest), { merchantInfo: this.createMerchantInfo(config) });\n        // TODO: #13 re-enable inferrence if/when we agree as a team\n        return request;\n    }\n    createMerchantInfo(config) {\n        const merchantInfo = Object.assign({}, config.paymentRequest.merchantInfo);\n        // apply softwareInfo if not set\n        if (!merchantInfo.softwareInfo) {\n            merchantInfo.softwareInfo = {\n                id: this.options.softwareInfoId,\n                version: this.options.softwareInfoVersion,\n            };\n        }\n        return merchantInfo;\n    }\n    isMounted() {\n        return this.element != null && this.element.isConnected !== false;\n    }\n    removeButton() {\n        if (this.element instanceof ShadowRoot || this.element instanceof Element) {\n            for (const child of Array.from(this.element.children)) {\n                if (child.tagName !== 'STYLE') {\n                    child.remove();\n                }\n            }\n        }\n    }\n    updateElement() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isMounted())\n                return;\n            const element = this.getElement();\n            if (!this.config) {\n                throw new Error('google-pay-button: Missing configuration');\n            }\n            // remove existing button\n            this.removeButton();\n            this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));\n            const buttonOptions = {\n                buttonType: this.config.buttonType,\n                buttonColor: this.config.buttonColor,\n                buttonSizeMode: this.config.buttonSizeMode,\n                buttonLocale: this.config.buttonLocale,\n                onClick: this.handleClick,\n                allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods,\n            };\n            const rootNode = element.getRootNode();\n            if (rootNode instanceof ShadowRoot) {\n                buttonOptions.buttonRootNode = rootNode;\n            }\n            // pre-create button\n            const button = this.client.createButton(buttonOptions);\n            this.setClassName(element, [element.className, 'not-ready']);\n            element.appendChild(button);\n            let showButton = false;\n            let readyToPay;\n            try {\n                readyToPay = yield this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));\n                showButton =\n                    (readyToPay.result && !this.config.existingPaymentMethodRequired)\n                        || (readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired)\n                        || false;\n            }\n            catch (err) {\n                if (this.config.onError) {\n                    this.config.onError(err);\n                }\n                else {\n                    console.error(err);\n                }\n            }\n            if (!this.isMounted())\n                return;\n            if (showButton) {\n                try {\n                    this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));\n                }\n                catch (err) {\n                    console.log('Error with prefetch', err);\n                }\n                // remove hidden className\n                this.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));\n            }\n            if (this.isReadyToPay !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result) || this.paymentMethodPresent !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent)) {\n                this.isReadyToPay = !!(readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result);\n                this.paymentMethodPresent = readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent;\n                if (this.config.onReadyToPayChange) {\n                    const readyToPayResponse = {\n                        isButtonVisible: showButton,\n                        isReadyToPay: this.isReadyToPay,\n                    };\n                    if (this.paymentMethodPresent) {\n                        readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;\n                    }\n                    this.config.onReadyToPayChange(readyToPayResponse);\n                }\n            }\n        });\n    }\n    setClassName(element, classNames) {\n        const className = classNames.filter(name => name).join(' ');\n        if (className) {\n            element.className = className;\n        }\n        else {\n            element.removeAttribute('class');\n        }\n    }\n    appendStyles() {\n        var _a, _b, _c;\n        if (typeof document === 'undefined')\n            return;\n        const rootNode = (_a = this.element) === null || _a === void 0 ? void 0 : _a.getRootNode();\n        const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${(_b = this.config) === null || _b === void 0 ? void 0 : _b.buttonLocale}`;\n        // initialize styles if rendering on the client:\n        if (rootNode) {\n            if (!((_c = rootNode.getElementById) === null || _c === void 0 ? void 0 : _c.call(rootNode, styleId))) {\n                const style = document.createElement('style');\n                style.id = styleId;\n                style.type = 'text/css';\n                style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\n                if (rootNode instanceof Document && rootNode.head) {\n                    rootNode.head.appendChild(style);\n                }\n                else {\n                    rootNode.appendChild(style);\n                }\n            }\n        }\n    }\n    isClientInvalidated(newConfig) {\n        if (!this.oldInvalidationValues)\n            return true;\n        const newValues = this.getInvalidationValues(newConfig);\n        return newValues.some((value, index) => value !== this.oldInvalidationValues[index]);\n    }\n    getInvalidationValues(config) {\n        var _a, _b;\n        return [\n            config.environment,\n            config.existingPaymentMethodRequired,\n            !!config.onPaymentDataChanged,\n            !!config.onPaymentAuthorized,\n            config.buttonColor,\n            config.buttonType,\n            config.buttonLocale,\n            config.buttonSizeMode,\n            config.paymentRequest.merchantInfo.merchantId,\n            config.paymentRequest.merchantInfo.merchantName,\n            (_a = config.paymentRequest.merchantInfo.softwareInfo) === null || _a === void 0 ? void 0 : _a.id,\n            (_b = config.paymentRequest.merchantInfo.softwareInfo) === null || _b === void 0 ? void 0 : _b.version,\n            config.paymentRequest.allowedPaymentMethods,\n        ];\n    }\n}\n\nvar name = \"@google-pay/button-angular\";\nvar version = \"2.6.0\";\nvar description = \"Angular component for Google Pay button\";\nvar main = \"dist/index.js\";\nvar repository = {\n\ttype: \"git\",\n\turl: \"https://github.com/google-pay/google-pay-button\",\n\tdirectory: \"src/button-angular\"\n};\nvar homepage = \"https://github.com/google-pay/google-pay-button/tree/main/src/button-angular#readme\";\nvar engines = {\n\tnode: \">=8.0.0\"\n};\nvar author = \"socsieng@google.com\";\nvar license = \"Apache-2.0\";\nvar scripts = {\n\tbuild: \"ng build --configuration production\"\n};\nvar dependencies = {\n\t\"@types/googlepay\": \"^0.6.3\"\n};\nvar peerDependencies = {\n\t\"@angular/core\": \">=8.0.0\",\n\t\"@types/googlepay\": \"^0.6.3\"\n};\nvar files = [\n\t\"dist/*\",\n\t\"bundles/*\",\n\t\"ems2015/*\",\n\t\"fesm2015/*\",\n\t\"lib/*\",\n\t\"button-angular/*\",\n\t\"google-pay-button-angular.*\",\n\t\"*.d.ts\",\n\t\"*.json\",\n\t\"README.md\"\n];\nvar keywords = [\n\t\"googlepay\",\n\t\"google-pay\",\n\t\"google-pay-button\",\n\t\"button\",\n\t\"angular\"\n];\nvar devDependencies = {\n\t\"@angular-devkit/build-ng-packagr\": \"^0.1002.0\",\n\t\"@angular/core\": \"^10.2.2\",\n\t\"ng-packagr\": \"^10.1.2\"\n};\nvar _package = {\n\tname: name,\n\tversion: version,\n\tdescription: description,\n\tmain: main,\n\trepository: repository,\n\thomepage: homepage,\n\tengines: engines,\n\tauthor: author,\n\tlicense: license,\n\tscripts: scripts,\n\tdependencies: dependencies,\n\tpeerDependencies: peerDependencies,\n\tfiles: files,\n\tkeywords: keywords,\n\tdevDependencies: devDependencies\n};\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a new function that delays invocations to the original function\n * within a specified wait period. The last invocation within this time period\n * gets invoked. All earlier invocations are ignore.\n *\n * @param func The function to invoke.\n * @param wait The time in milliseconds to wait for idle invocations.\n */\nfunction debounce(func, wait = 0) {\n    let timeout;\n    return function (...args) {\n        window.clearTimeout(timeout);\n        const later = function () {\n            timeout = undefined;\n            return func(...args);\n        };\n        return new Promise(resolve => {\n            timeout = window.setTimeout(() => {\n                const result = later();\n                resolve(result);\n            }, wait);\n        });\n    };\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonComponent {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.manager = new ButtonManager({\n            cssSelector: 'google-pay-button',\n            softwareInfoId: name,\n            softwareInfoVersion: version,\n        });\n        this.initializeButton = debounce(() => {\n            if (!this.assertRequiredProperty('paymentRequest')) {\n                return;\n            }\n            if (!this.assertRequiredProperty('environment')) {\n                return;\n            }\n            const config = {\n                paymentRequest: this.paymentRequest,\n                environment: this.environment,\n                existingPaymentMethodRequired: this.existingPaymentMethodRequired,\n                onPaymentDataChanged: this.paymentDataChangedCallback,\n                onPaymentAuthorized: this.paymentAuthorizedCallback,\n                buttonColor: this.buttonColor,\n                buttonType: this.buttonType,\n                buttonSizeMode: this.buttonSizeMode,\n                buttonLocale: this.buttonLocale,\n                onReadyToPayChange: result => {\n                    if (this.readyToPayChangeCallback) {\n                        this.readyToPayChangeCallback(result);\n                    }\n                    this.dispatch('readytopaychange', result);\n                },\n                onCancel: reason => {\n                    if (this.cancelCallback) {\n                        this.cancelCallback(reason);\n                    }\n                    this.dispatch('cancel', reason);\n                },\n                onError: error => {\n                    var _a;\n                    if (this.errorCallback) {\n                        (_a = this.errorCallback) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                    }\n                    this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', { error }));\n                },\n                onLoadPaymentData: paymentData => {\n                    if (this.loadPaymentDataCallback) {\n                        this.loadPaymentDataCallback(paymentData);\n                    }\n                    this.dispatch('loadpaymentdata', paymentData);\n                },\n                onClick: event => {\n                    var _a;\n                    if (this.clickCallback) {\n                        (_a = this.clickCallback) === null || _a === void 0 ? void 0 : _a.call(this, event);\n                    }\n                },\n            };\n            this.manager.configure(config);\n        });\n    }\n    get isReadyToPay() {\n        return this.manager.isReadyToPay;\n    }\n    ngOnInit() {\n        return this.manager.mount(this.elementRef.nativeElement);\n    }\n    ngOnChanges() {\n        return this.initializeButton();\n    }\n    assertRequiredProperty(name) {\n        const value = this[name];\n        if (value === null || value === undefined) {\n            this.throwError(Error(`Required property not set: ${name}`));\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Throws an error.\n     *\n     * Used for testing purposes so that the method can be spied on.\n     */\n    throwError(error) {\n        throw error;\n    }\n    dispatch(type, detail) {\n        this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {\n            bubbles: true,\n            cancelable: false,\n            detail,\n        }));\n    }\n}\nGooglePayButtonComponent.ɵfac = function GooglePayButtonComponent_Factory(t) { return new (t || GooglePayButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nGooglePayButtonComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GooglePayButtonComponent, selectors: [[\"google-pay-button\"]], inputs: { paymentRequest: \"paymentRequest\", environment: \"environment\", existingPaymentMethodRequired: \"existingPaymentMethodRequired\", buttonColor: \"buttonColor\", buttonType: \"buttonType\", buttonSizeMode: \"buttonSizeMode\", buttonLocale: \"buttonLocale\", paymentDataChangedCallback: \"paymentDataChangedCallback\", paymentAuthorizedCallback: \"paymentAuthorizedCallback\", readyToPayChangeCallback: \"readyToPayChangeCallback\", loadPaymentDataCallback: \"loadPaymentDataCallback\", cancelCallback: \"cancelCallback\", errorCallback: \"errorCallback\", clickCallback: \"clickCallback\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nGooglePayButtonComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nGooglePayButtonComponent.propDecorators = {\n    paymentRequest: [{ type: Input }],\n    environment: [{ type: Input }],\n    existingPaymentMethodRequired: [{ type: Input }],\n    buttonColor: [{ type: Input }],\n    buttonType: [{ type: Input }],\n    buttonSizeMode: [{ type: Input }],\n    buttonLocale: [{ type: Input }],\n    paymentDataChangedCallback: [{ type: Input }],\n    paymentAuthorizedCallback: [{ type: Input }],\n    readyToPayChangeCallback: [{ type: Input }],\n    loadPaymentDataCallback: [{ type: Input }],\n    cancelCallback: [{ type: Input }],\n    errorCallback: [{ type: Input }],\n    clickCallback: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GooglePayButtonComponent, [{\n        type: Directive,\n        args: [{\n                selector: 'google-pay-button'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { paymentRequest: [{\n            type: Input\n        }], environment: [{\n            type: Input\n        }], existingPaymentMethodRequired: [{\n            type: Input\n        }], buttonColor: [{\n            type: Input\n        }], buttonType: [{\n            type: Input\n        }], buttonSizeMode: [{\n            type: Input\n        }], buttonLocale: [{\n            type: Input\n        }], paymentDataChangedCallback: [{\n            type: Input\n        }], paymentAuthorizedCallback: [{\n            type: Input\n        }], readyToPayChangeCallback: [{\n            type: Input\n        }], loadPaymentDataCallback: [{\n            type: Input\n        }], cancelCallback: [{\n            type: Input\n        }], errorCallback: [{\n            type: Input\n        }], clickCallback: [{\n            type: Input\n        }] }); })();\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonModule {\n}\nGooglePayButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GooglePayButtonModule });\nGooglePayButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GooglePayButtonModule_Factory(t) { return new (t || GooglePayButtonModule)(); }, imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GooglePayButtonModule, { declarations: [GooglePayButtonComponent], exports: [GooglePayButtonComponent] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GooglePayButtonModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [GooglePayButtonComponent],\n                imports: [],\n                exports: [GooglePayButtonComponent]\n            }]\n    }], null, null); })();\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GooglePayButtonComponent, GooglePayButtonModule };\n\n//# sourceMappingURL=google-pay-button-angular.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainRoutingModule } from './main.routing.module';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { MainComponent } from './main.component';\nimport { GooglePayButtonModule } from '@google-pay/button-angular';\nimport { ConectsComponent } from './conects/conects.component';\nimport { AccountComponent } from './account/account.component';\n\n@NgModule({\n    declarations:[\n        MainComponent,\n        NavbarComponent,\n        ConectsComponent,\n        AccountComponent\n    ],\n    imports:[\n        CommonModule,\n        MainRoutingModule,\n        GooglePayButtonModule\n    ],\n    providers:[]\n})\nexport class MainModule{}","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AUTH_PATH, UserRute, USER_ROUTES } from 'src/app/constants';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n  routes: UserRute[] = USER_ROUTES;\n  showLogout = false;\n  constructor(\n    private router: Router,\n    private toastr: ToastrService\n  ) { }\n\n  ngOnInit(): void {\n\n  }\n\n  logout() {\n    localStorage.clear();\n    this.router.navigate([AUTH_PATH.SIGN_IN]);\n  }\n\n}\n","<nav>\n    <input type=\"checkbox\" id=\"check\">\n    <label for=\"check\" class=\"checkbtn\">\n        <i class=\"fas fa-bars\"></i>\n    </label>\n    <label class=\"logo\">Mani</label>\n    <ul>\n        <li *ngFor=\"let item of routes\">\n            <a [routerLink]=\"item.path\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact:\n                true}\">{{item.name}}</a>\n        </li>\n        <li><a href=\"\">Logout</a></li>\n\n    </ul>\n</nav>","import { Component, OnInit } from '@angular/core';\nimport { AlertService } from 'src/app/common/alert-service/alert-service';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n\n  constructor(\n    private alertService:AlertService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  enterAmount(){\n    this.alertService.promtBox().then(res=>{\n\n    }).catch(err=>\n      {\n        \n      })\n  }\n}\n","<div class=\"account-box\">\n    <h4 class=\"text-center\">User Account</h4>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"form-group \">\n                <label for=\"\" class=\"text-left\">Balance in account</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"10,000\" disabled>\n            </div>\n            <div class=\"form-group \">\n                <label for=\"\" class=\"text-left\">Total Earning</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"10,000\" disabled>\n            </div>\n\n            <div class=\"form-group mt-3 text-center\">\n                <input type=\"submit\" value=\"Widhraw\" class=\"btn btn-outline-success\" (click)=\"enterAmount()\">\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n ngOnInit(){}\n\n}\n","<app-navbar></app-navbar>\n\n<div class=\"container\">\n    <router-outlet></router-outlet>\n</div>"],"sourceRoot":"webpack:///"}